import { useState, useEffect } from "react";

import Head from "next/head";
import Router from "next/router";
import { db } from "@/src/firebase-config";
import {
  collection,
  addDoc,
  getDocs,
  updateDoc,
  deleteDoc,
  doc,
} from "firebase/firestore";
import Card from "@/components/Card";

export default function Home() {
  const [requests, setRequests] = useState([]);
  const requestRef = collection(db, "requests");

  const [title, setTitle] = useState();
  const [description, setDescription] = useState();
  const [date, setDate] = useState();

  const getRequests = async () => {
    let response;

    try {
      response = await getDocs(collection(db, "requests"));
      setRequests(response.docs.map((req) => ({ ...req.data(), id: req.id })));
    } catch (err) {
      if (err.response) {
        console.log(err.response.data);
        console.log(err.response.status);
        console.log(err.response.headers);
      } else if (err.request) {
        console.log(err.request);
      } else {
        console.log("Error", err.message);
      }
      response = err.response;
    }

    return response;
  };

  const openRequest = async () => {
    let response;

    try {
      response = await addDoc(requestRef, {
        title: title,
        description: description,
        date: date,
      });
    } catch (err) {
      if (err.response) {
        console.log(err.response.data);
        console.log(err.response.status);
        console.log(err.response.headers);
      } else if (err.request) {
        console.log(err.request);
      } else {
        console.log("Error", err.message);
      }
      response = err.response;
    }

    return response;
  };

  const updateRequest = async (id) => {
    let response;

    const request = doc(db, "requests", id);
    const newFields = {
      title: "new title",
      description: "new description",
      date: "new date",
    };

    try {
      response = await updateDoc(request, newFields);
    } catch (err) {
      if (err.response) {
        console.log(err.response.data);
        console.log(err.response.status);
        console.log(err.response.headers);
      } else if (err.request) {
        console.log(err.request);
      } else {
        console.log("Error", err.message);
      }
      response = err.response;
    }

    return response;
  };

  const deleteRequest = async (id) => {
    let response;

    const request = doc(db, "requests", id);

    try {
      response = await deleteDoc(request);
    } catch (err) {
      if (err.response) {
        console.log(err.response.data);
        console.log(err.response.status);
        console.log(err.response.headers);
      } else if (err.request) {
        console.log(err.request);
      } else {
        console.log("Error", err.message);
      }
      response = err.response;
    }

    return response;
  };

  useEffect(() => {
    getRequests();
  }, []);

  return (
    <>
      <Head>
        <title>Birlikte Güçlüyüz</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="grid bottom border-black justify-center my-2">
        <input
          placeholder="Title"
          onChange={(e) => {
            setTitle(e.target.value);
          }}
        />
        <input
          placeholder="Descrition"
          onChange={(e) => {
            setDescription(e.target.value);
          }}
        />
        <input
          placeholder="Date"
          onChange={(e) => {
            setDate(e.target.value);
          }}
        />
        <button className="primary" onClick={() => openRequest()}>Add</button>
      </div>

      <div className="grid gap-2">
        {requests?.map((req) => {
          return (
            <button className="primary" key={req.id}>
              <h1>{req.title}</h1>
              <p>{req.description}</p>
              <p>{req.date}</p>
              <div className="flex items-center justify-center gap-2">
                <a className=" hover:text-red-400" onClick={() => updateRequest(req.id)}>Update</a>
                <a className=" hover:text-red-400" onClick={() => deleteRequest(req.id)}>Delete</a>
              </div>
            </button>
          );
        })}
      </div>
      <main>
        <div>
          <p className="text-6xl text-center text-pink-600 mt-10 font-bold">
            Kim yapar?
          </p>
          <p className="text-6xl text-center text-pink-600 mt-4 font-bold">
            BEN YAPARIM
          </p>
          <p className="text-center max-w-xl w-1/2 m-auto my-20">
            Ben Yaparım! <br /> Afet zamanlarında belli yetkinliklere sahip acil
            gönüllü ihtiyacı duyan kurumlarla, bu ihtiyacı karşılayabilecek
            gönüllü uzmanları bir araya getiren platformdur.
          </p>
          <p className="text-xl text-center text-pink-600 mt-10 font-bold">
            Aktif çağrıları incele
          </p>
        </div>
        <Card />
      </main>
    </>
  );
}
